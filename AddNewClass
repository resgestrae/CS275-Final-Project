package com.android.nest;

import java.util.ArrayList;
import java.util.Hashtable;

import com.cloudmine.api.CMApiCredentials;
import com.cloudmine.api.rest.CMStore;
import com.cloudmine.api.rest.callbacks.ObjectModificationResponseCallback;
import com.cloudmine.api.rest.response.ObjectModificationResponse;

import android.app.Activity;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;
import android.widget.AdapterView.OnItemSelectedListener;

public class AddNewClass extends Activity
{
	// Find this in your developer console
		private static final String APP_ID = "bb4c36f4e19d4fe28f855d293e6e11bb";
		// Find this in your developer console
		private static final String API_KEY = "600977a2294c4f5ebde8dbf56f017dc6";

		// Widgets - GUI
	    private EditText classNameTv;
		private Spinner spBuildingName;
	    private EditText roomNumberTv;
		private TextView tvStartOut;
	    private TextView tvEndOut;
	    private Button btnChStart;
	    private Button btnChEnd;
	    
	    
	    static final int TIME_DIALOG_ID = 1111;
	       
	    //Class Info inputs
	    private String ownerName = "owner";
	    private String className;
	    private String buildingName;
	    private ArrayList<String> daysList;
	    private String roomNumber;
	    private int startHour;
	    private int startMinute;
	    private int endHour;
	    private int endMinute;

		
		
		private Button addClassButton;
		private Button submitButton;
		
	    private ArrayAdapter<String> adptBuildingName;
	    private Hashtable<String,ArrayList<Event>> eventTable;
	    
		private MyObject myObject;
		public void onCreate(Bundle savedInstanceState)
		{
			super.onCreate(savedInstanceState);
			setContentView(R.layout.input_schedule_layout);
			
			//Initialize Cloudmine
			CMApiCredentials.initialize(APP_ID, API_KEY, getApplicationContext());
			CMStore store = CMStore.getStore();
			
			
			SharedPreferences p = PreferenceManager.getDefaultSharedPreferences(AddNewClass.this);
			final String objectId = p.getString("ownerScheduleId", "");
			if(objectId.equals(""))
			{
				Toast.makeText(AddNewClass.this, "You have not added any schedule.", Toast.LENGTH_LONG).show();
				Intent intent = new Intent(AddNewClass.this,InputSchedule.class);
				AddNewClass.this.startActivity(intent);
			}
			
			 myObject = (MyObject) store.getStoredObject(objectId);//getting the object by object id
			System.out.println(myObject.getOwnerName());
			System.out.println(myObject.getSchedule().keySet());
			System.out.println("Hello World!");
			
			eventTable = myObject.getSchedule();//getting the Hashtable<String,ArrayList<Event>>
			
			
			addClassButton = (Button)findViewById(R.id.addClassButton);
			submitButton = (Button) findViewById(R.id.submitButton);
			
			
			 /**Set ArrayAdapter adptBuildingName to Spinner spBuildingName**/
	        String[] buildingNames = getResources().getStringArray(R.array.buildingNames);//Get String Array of Building Names from resources
	        spBuildingName = (Spinner) findViewById(R.id.buildingSpinner);//Get the spinner
	        adptBuildingName = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, buildingNames);
	        spBuildingName.setAdapter(adptBuildingName);
	        
	        // Building Name Item selected Listener        
	        spBuildingName.setOnItemSelectedListener(new OnItemSelectedListener()
	        {
	        	@Override
	        	public void onItemSelected(AdapterView<?> adapter, View v, int pos, long id)
	        	{
	        		//On selecting a spinner item...
	        		String item = adapter.getItemAtPosition(pos).toString();
	        		buildingName = item;
	        	}
	        	@Override
	            public void onNothingSelected(AdapterView<?> arg0) 
	        	{
	        		// TODO Auto-generated method stub
	                 }
	        });

	        tvStartOut = (TextView) findViewById(R.id.startOutTextView);
	        addStartButtonClickListener();
	        
	        tvEndOut = (TextView) findViewById(R.id.endOutTextView);
	        addEndButtonClickListener();
	        
	        
	      	
			
		}//END OF onCreate()
		
		 /***Adds Listeners to the ChangeStartTime Button***/
	    public void addStartButtonClickListener()
	    {
	    	btnChStart = (Button) findViewById(R.id.chStartTimeButton);
	    	btnChStart.setOnClickListener(new OnClickListener()
	    	{
	    		

				@Override
	    		public void onClick(View v)
				{
	    			//showDialog(TIME_DIALOG_ID);
					new TimePickerDialog(AddNewClass.this, timePickerListener, startHour, startMinute, false).show();
	    		}
	    	});
	    }
	    /***Adds Listeners to the ChangeEndTime button***/
	    public void addEndButtonClickListener()
	    {
	        	btnChEnd = (Button) findViewById(R.id.chEndTimeButton);
	        	btnChEnd.setOnClickListener(new OnClickListener()
	        	{
	        		
	    				@Override
	        			public void onClick(View v)
	    				{
	        				//showDialog(TIME_DIALOG_ID);
	    					new TimePickerDialog(AddNewClass.this, timePickerListener2, endHour, endMinute, false).show();
	    				}
	        	});
	    }
	    
	    /***Listener for the EndTime picker**/
	    private TimePickerDialog.OnTimeSetListener timePickerListener2 = new TimePickerDialog.OnTimeSetListener() 
	    {

			@Override
			public void onTimeSet(TimePicker view, int hourOfDay, int minutes) 
			{
				// TODO Auto-generated method stub
				endHour = hourOfDay;
				endMinute = minutes;

				String time = UpdateTime(endHour, endMinute);
				tvEndOut.setText(time);

			}
		};
	    /***Listener for the StartTime picker**/
	    private TimePickerDialog.OnTimeSetListener timePickerListener = new TimePickerDialog.OnTimeSetListener() 
	    {
			@Override
				public void onTimeSet(TimePicker view, int hourOfDay, int minutes) 
				{
					// TODO Auto-generated method stub
					startHour = hourOfDay;
					startMinute = minutes;

					String time = UpdateTime(startHour, startMinute);
					tvStartOut.setText(time);
				}
	    };
	    /**NOT IMPLEMENTED BUT MIGHT BE USED IN THE FUTURE**/
	    public void getCheckedItem(View v)
		{
			
		}
		private static String UtilTime(int value)
		{
			if(value<10)
				return"0" + String.valueOf(value);
			else
				return String.valueOf(value);
		}

		/***Used to convert 24hr format to 12 hr format***/
		private String UpdateTime(int hours, int mins)
		{

			String timeSet="";
			if (hours> 12){
				hours -= 12;
				timeSet = "PM";
			}else if (hours == 0) {
				hours += 12;
				timeSet = "AM";
			}else if (hours == 12){
				timeSet="PM";
			}else
				timeSet="AM";

			String minutes = "";
			if (mins<10)
				minutes = "0" +mins;
			else
				minutes =String.valueOf(mins);

			// Append in a string builder
			String aTime = new StringBuilder().append(hours).append(":").append(minutes).append(" ").append(timeSet).toString();
			return aTime;

		}
		/**When AddClass button is pressed**/
		public void addClass(View v)
		{
			Toast.makeText(AddNewClass.this, "Add Class", Toast.LENGTH_LONG).show();
			classNameTv = (EditText)findViewById(R.id.classEditText);
			className = classNameTv.getText().toString();
			classNameTv.setText("");
			
			/***buildingName already set in Spinner Listener***/
			spBuildingName.setSelection(0);
			
			//getting the days for the new class
		    daysList = new ArrayList<String>();
		    CheckBox checkBox = (CheckBox)findViewById(R.id.monCheckBox);
		    if(checkBox.isChecked())
		    {
		    	String day = checkBox.getText().toString();
				daysList.add(day);
				checkBox.setChecked(false);
		    }
		    
		    checkBox = (CheckBox)findViewById(R.id.tuesCheckBox);
		    if(checkBox.isChecked())
		    {
		    	String day = checkBox.getText().toString();
				daysList.add(day);
				checkBox.setChecked(false);
		    }
		    
		    checkBox = (CheckBox)findViewById(R.id.wedsCheckBox);
		    if(checkBox.isChecked())
		    {
		    	String day = checkBox.getText().toString();
				daysList.add(day);
				checkBox.setChecked(false);
		    }
		    
		    checkBox = (CheckBox)findViewById(R.id.thursCheckBox);
		    if(checkBox.isChecked())
		    {
		    	String day = checkBox.getText().toString();
				daysList.add(day);
				checkBox.setChecked(false);
		    }
		    
		    checkBox = (CheckBox)findViewById(R.id.friCheckBox);
		    if(checkBox.isChecked())
		    {
		    	String day = checkBox.getText().toString();
				daysList.add(day);
				checkBox.setChecked(false);
		    }
		    
		    //getting the room number
		    roomNumberTv = (EditText)findViewById(R.id.roomNumEditText);
		    roomNumber = roomNumberTv.getText().toString();
		    roomNumberTv.setText("");
		    
		    //getting time
		    long startTimeInSeconds = startHour*3600 + startMinute*60; 
			tvStartOut.setText("");
		    long endTimeInSeconds = endHour*3600 + endMinute*60;
			tvEndOut.setText("");
		    
			System.out.println("Class Name: " + className);
			System.out.println("Building Name: " + buildingName);
			System.out.println("List of Days: " + daysList);
			System.out.println("Room Number: " + roomNumber);
			System.out.println("StartTime: " + startTimeInSeconds);
			System.out.println("End Time: " + endTimeInSeconds);//START HERE
			
			//creating new event 
			Event collegeClass = new Event();
		    collegeClass.setName(className);
		    collegeClass.setBuildingName(buildingName);
		    collegeClass.setRoomNumber(roomNumber);
		    collegeClass.setClassDays(daysList);
		    collegeClass.setStartTime(startTimeInSeconds);
		    collegeClass.setEndTime(endTimeInSeconds);
		    System.out.println(collegeClass);		    
		    
		    System.out.println(collegeClass.getDays());
		    
		    /**For each day of event, it is added to the each day's arraylist**/
		    for(int i = 0; i <daysList.size();i++)
		    {
		    	String dayKey = daysList.get(i);
		    	System.out.println("dayKey: " + dayKey);
		    	ArrayList<Event> tempEventList;
		    	System.out.println(eventTable.keySet());
		    	System.out.println("containd key " + dayKey +": " + eventTable.containsKey(dayKey));
		    	if(eventTable.containsKey(dayKey))
		    	{	
		    		tempEventList = eventTable.get(dayKey);
		    		if(tempEventList==null)
		    		{
		    			Toast.makeText(AddNewClass.this, "tempEventList is null", Toast.LENGTH_LONG).show();
		    			//tempEventList = new ArrayList<Event>();
		    			break;
		    		}
		    		tempEventList.add(collegeClass);
		    		eventTable.put(dayKey,tempEventList);
		    	}
		    	{
		    		tempEventList = new ArrayList<Event>();
		    		tempEventList.add(collegeClass);
		    		eventTable.put(dayKey, tempEventList);
		    	}
		    }
		}
		/**when done is pressed**/
		public void finishSchedule(View v)
		{
			myObject.setSchedule(eventTable);
			myObject.save(new ObjectModificationResponseCallback()
		    {
		        public void onCompletion(ObjectModificationResponse response) 
		        {
		            Toast.makeText(AddNewClass.this, "Classes Added", Toast.LENGTH_LONG).show();
		            Intent intent = new Intent(AddNewClass.this,MainMenuActivity.class);
		            AddNewClass.this.startActivity(intent);
		            
		        }
		     
		        public void onFailure(Throwable e, String msg) 
		        {
		            System.out.println("We failed: " + e.getMessage());
		        }
		    });
		}
		

}
